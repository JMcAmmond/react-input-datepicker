{"version":3,"sources":["common/input-datepicker.tsx","common/elements.tsx","App.tsx","index.tsx","../../src/validation/date.ts","../../src/helpers.ts","../../src/styles.ts","../../src/index.tsx"],"names":["StyledInputDatepicker","styled","InputDatepicker","DateContainer","div","label","H3","h3","Header","header","App","useState","value","setValue","Date","maxValue","setMaxValue","minValue","setMinValue","onDateChange","useCallback","date","onMaxDateChange","onMinDateChange","maxDate","minDate","labels","year","month","day","ReactDOM","render","document","getElementById","buildDateFromInput","Number","isValidDate","userDate","isDate","Object","dayMatch","monthMatch","yearMatch","isValidDateObject","props","maxDatePlusOne","minDateMinusOne","spreadDateToObject","dateValue","flexRow","display","flexDirection","flexColumn","hasError","setHasError","error","setError","setDate","orderArray","useMemo","validDateChange","newDate","renderError","validate","errorString","onInputChange","e","inputField","className","style","htmlFor","id","type","name","onChange","onBlur","dateField","dayLabel","monthLabel","yearLabel","useEffect","React","key","i","showLabels","showErrors","format"],"mappings":"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","file":"static/js/main.06f09c2c.chunk.js","sourcesContent":["import styled from 'styled-components';\nimport InputDatepicker from 'react-input-datepicker';\n\nconst StyledInputDatepicker: any = styled(InputDatepicker)`\n  .rid_date-container {\n    > div {\n      margin-right: 15px;\n\n      &:last-child {\n        margin-right: 0;\n      }\n\n      label {\n        font-size: 0.8rem;\n        margin-bottom: 5px;\n        font-weight: 600;\n      }\n\n      input {\n        color: #444444;\n        font-size: 13px;\n        padding: 11px;\n        border-radius: 3px;\n        border: none;\n        text-align: center;\n\n        &.has-error {\n          border: 2px solid #f97474;\n        }\n\n        &::-webkit-inner-spin-button,\n        &::-webkit-outer-spin-button {\n          -webkit-appearance: none;\n          margin: 0;\n        }\n        -moz-appearance: textfield;\n      }\n    }\n\n    .rid_day-container input {\n      width: 60px;\n    }\n    .rid_month-container input {\n      width: 60px;\n    }\n    .rid_year-container input {\n      width: 80px;\n    }\n  }\n\n  .error-message {\n    color: #f97474;\n    margin-top: 6px;\n    font-size: 0.9rem;\n  }\n`;\n\nconst DateContainer = styled.div`\n  display: flex;\n  justify-content: center;\n  flex-direction: column;\n  align-items: center;\n\n  .rid_date-container {\n    justify-content: center;\n  }\n`;\n\nexport { StyledInputDatepicker, DateContainer };\n","import styled from 'styled-components';\n\nconst Label = styled.label`\n  font-weight: 600;\n  text-transform: uppercase;\n  margin-bottom: 10px;\n  display: block;\n  font-size: 0.9rem;\n  color: #333333;\n`;\n\nconst H3 = styled.h3`\n  font-weight: 600;\n  font-size: 1.5rem;\n  text-align: center;\n  color: #333;\n  margin-bottom: 1rem;\n  margin-top: 4rem;\n`;\n\nconst Header = styled.header`\n  font-weight: 600;\n  font-size: 2.5rem;\n  text-align: center;\n  color: #333;\n  margin-bottom: 1rem;\n  margin-top: 2rem;\n`;\n\nexport { Label, H3, Header }\n","import React, { useState, useCallback } from 'react';\n\nimport {\n  StyledInputDatepicker,\n  DateContainer,\n} from './common/input-datepicker';\nimport { H3, Header } from './common/elements';\n\nconst App = () => {\n  const [value, setValue] = useState<Date | null>(null);\n  const [maxValue, setMaxValue] = useState(new Date());\n  const [minValue, setMinValue] = useState(new Date(1956, 0, 1));\n\n  const onDateChange = useCallback((date: any) => {\n    setValue(date);\n  }, []);\n\n  const onMaxDateChange = useCallback((date: any) => {\n    setMaxValue(date);\n  }, []);\n\n  const onMinDateChange = useCallback((date: any) => {\n    setMinValue(date);\n  }, []);\n\n  return (\n    <div>\n      <Header>React Input Datepicker</Header>\n\n      <H3>Standard</H3>\n      <DateContainer>\n        <StyledInputDatepicker value={value} onDateChange={onDateChange} />\n      </DateContainer>\n\n      <H3>Max Date</H3>\n      <DateContainer>\n        <StyledInputDatepicker\n          value={maxValue}\n          onDateChange={onMaxDateChange}\n          maxDate={new Date(1999, 11, 31)}\n        />\n      </DateContainer>\n\n      <H3>Min Date</H3>\n      <DateContainer>\n        <StyledInputDatepicker\n          value={minValue}\n          onDateChange={onMinDateChange}\n          minDate={new Date(2000, 0, 1)}\n        />\n      </DateContainer>\n\n      <H3>Custom Labels</H3>\n      <DateContainer>\n        <StyledInputDatepicker\n          value={value}\n          onDateChange={onDateChange}\n          labels={{\n            year: 'Año',\n            month: 'Mes',\n            day: 'Día',\n          }}\n        />\n      </DateContainer>\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react'\nimport ReactDOM from 'react-dom'\n\nimport './index.css'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n","/**\n * Build a date from input\n * @param {string} day\n * @param {string} month\n * @param {string} year\n */\nconst buildDateFromInput = (day: string, month: string, year: string) => {\n  const date = new Date(Number(year), Number(month) - 1, Number(day));\n  return date;\n};\n\n/**\n * Check if the date value is a valid Date object and that it matches the values it was created from\n * @param date Date\n * @param day string\n * @param month string\n * @param year string\n */\nconst isValidDateObject = (\n  date: Date,\n  day: string,\n  month: string,\n  year: string,\n) => {\n  const isDate = Object.prototype.toString.call(date) === '[object Date]';\n  const dayMatch = date.getDate() === Number(day);\n  const monthMatch = date.getMonth() === Number(month) - 1;\n  const yearMatch = date.getFullYear() === Number(year);\n\n  return isDate && dayMatch && monthMatch && yearMatch;\n};\n\n/**\n * Determine if provided date is a valid date and falls between date range\n * @param {string} day\n * @param {string} month\n * @param {string} year\n * @param {object} props\n */\nconst isValidDate = (day: string, month: string, year: string, props: any) => {\n  const userDate = buildDateFromInput(day, month, year);\n\n  // Must be a valid date\n  if (!isValidDateObject(userDate, day, month, year)) {\n    return props.invalidMessage || 'Not a valid date';\n  }\n\n  // Must be same or before max date\n  if (props.maxDate) {\n    const { maxDate } = props;\n    if (userDate > maxDate) {\n      const maxDatePlusOne = new Date(maxDate);\n      maxDatePlusOne.setDate(maxDatePlusOne.getDate() + 1);\n\n      return (\n        props.maxDateMessage ||\n        `Date must be less than ${maxDatePlusOne.toDateString().substring(3)}`\n      );\n    }\n  }\n\n  // Must be same or after min date\n  if (props.minDate) {\n    const { minDate } = props;\n    if (userDate < minDate) {\n      const minDateMinusOne = new Date(minDate);\n      minDateMinusOne.setDate(minDateMinusOne.getDate() - 1);\n\n      return (\n        props.minDateMessage ||\n        `Date must be greater than ${minDateMinusOne\n          .toDateString()\n          .substring(3)}`\n      );\n    }\n  }\n\n  return '';\n};\n\nexport { isValidDate, buildDateFromInput };\n","import { IDate } from './interfaces';\n\n/**\n * Parse date object into day, month, year state\n */\nexport const spreadDateToObject = (dateValue: Date | null): IDate => {\n  return {\n    day: dateValue ? `${dateValue.getDate()}` : '',\n    month: dateValue ? `${dateValue.getMonth() + 1}` : '',\n    year: dateValue ? `${dateValue.getFullYear()}` : '',\n  };\n};\n","export const flexRow: React.CSSProperties = {\n  display: 'flex',\n  flexDirection: 'row',\n};\n\nexport const flexColumn: React.CSSProperties = {\n  display: 'flex',\n  flexDirection: 'column',\n};\n","/* eslint-disable react/no-array-index-key */\nimport React, {\n  useState,\n  useCallback,\n  ChangeEvent,\n  useMemo,\n  useEffect,\n} from 'react';\nimport { isValidDate, buildDateFromInput } from './validation/date';\nimport { IDate, IInputDatePicker } from './interfaces';\nimport { spreadDateToObject } from './helpers';\nimport { flexRow, flexColumn } from './styles';\n\nconst InputDatepicker: React.FC<IInputDatePicker> = (props) => {\n  const [hasError, setHasError] = useState<boolean>(false);\n  const [error, setError] = useState<string>();\n  const [date, setDate] = useState<IDate>(spreadDateToObject(props.value));\n\n  const orderArray = useMemo(() => props.format!.split('/'), [props.format]);\n\n  /**\n   * Call onDateChange prop with the provided date object\n   */\n  const onDateChange = useCallback(\n    (newDate) => {\n      props.onDateChange(newDate);\n    },\n    [props],\n  );\n\n  /**\n   * Build a Date object and call the onDateChange function\n   */\n  const validDateChange = useCallback(() => {\n    const newDate = buildDateFromInput(date.day, date.month, date.year);\n    onDateChange(newDate);\n  }, [date.day, date.month, date.year, onDateChange]);\n\n  /**\n   * Sets the error state and calls the onDateChange function with a null value\n   */\n  const renderError = useCallback(\n    (err, hasErr) => {\n      setError(err);\n      setHasError(hasErr);\n      onDateChange(null);\n    },\n    [onDateChange],\n  );\n\n  /**\n   * Validates if a the inputs form a valid date\n   * Returns null if values are not set\n   * Returns null and errors if date is not valid\n   * Returns a valid date object when everything passes\n   */\n  const validate = useCallback(() => {\n    const { day, month, year } = date;\n\n    // Must contain values\n    if (!day || !month || !year) {\n      onDateChange(null);\n      return;\n    }\n\n    // Validate date input\n    const errorString = isValidDate(day, month, year, props);\n    if (errorString !== '') {\n      renderError(errorString, true);\n      return;\n    }\n\n    validDateChange();\n  }, [date, onDateChange, props, renderError, validDateChange]);\n\n  /**\n   * Sets the date state when an input value changes\n   */\n  const onInputChange = useCallback(\n    (e: ChangeEvent<HTMLInputElement>) => {\n      setDate({ ...date, [e.target.name]: e.target.value });\n    },\n    [date],\n  );\n\n  /**\n   * Create an input field with a form label\n   */\n  const inputField = useCallback(\n    (id, label, value) => {\n      const className = `rid_${id}-container`;\n\n      return (\n        <div className={`${className}`} style={flexColumn}>\n          {props.showLabels ? <label htmlFor={id}>{label}</label> : null}\n          <input\n            className={`${hasError ? 'has-error' : ''}`}\n            type=\"number\"\n            id={id}\n            name={id}\n            value={value}\n            onChange={onInputChange}\n            onBlur={validate}\n          />\n        </div>\n      );\n    },\n    [hasError, onInputChange, props.showLabels, validate],\n  );\n\n  /**\n   * Creates an object with all input field elements\n   */\n  const dateField = useMemo(() => {\n    const dayLabel = (props.labels && props.labels.day) || 'Day';\n    const monthLabel = (props.labels && props.labels.month) || 'Month';\n    const yearLabel = (props.labels && props.labels.year) || 'Year';\n\n    const fields = {\n      day: inputField('day', dayLabel, date.day),\n      month: inputField('month', monthLabel, date.month),\n      year: inputField('year', yearLabel, date.year),\n    };\n\n    return fields;\n  }, [date.day, date.month, date.year, inputField, props]);\n\n  /**\n   * When ever the date state changes then clear errors and validate the date\n   */\n  useEffect(() => {\n    setError('');\n    setHasError(false);\n    validate();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  useEffect(() => {\n    const { value } = props;\n    const { day, month, year } = date;\n\n    if (value !== null && value !== buildDateFromInput(day, month, year)) {\n      setDate(spreadDateToObject(value));\n    }\n  }, [props]);\n\n  return (\n    <div className={`rid ${props.className}`}>\n      <div className=\"rid_date-container\" style={flexRow}>\n        {orderArray.map((key, i) => {\n          return (\n            <React.Fragment key={`${key}-${i}`}>\n              {dateField[key]}\n            </React.Fragment>\n          );\n        })}\n      </div>\n      {props.showErrors && hasError && (\n        <div className=\"error-message\">{error}</div>\n      )}\n    </div>\n  );\n};\n\nexport default InputDatepicker;\n\nInputDatepicker.defaultProps = {\n  value: null,\n  showLabels: true,\n  showErrors: true,\n  format: 'month/day/year',\n  className: '',\n};\n"],"sourceRoot":""}